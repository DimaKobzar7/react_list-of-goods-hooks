{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","renderItems","goods","visibleGoods","sort","firstProduct","secondProduct","ALPABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAqCE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAyBMC,EArDD,SACLC,EADK,GAGJ,IADCH,EACF,EADEA,SAAUH,EACZ,EADYA,WAENO,EAAY,YAAOD,GAmBzB,OAjBAC,EAAaC,MAAK,SAACC,EAAcC,GAC/B,OAAQP,GACN,KAAKP,EAASe,QACZ,OAAOF,EAAaG,cAAcF,GAEpC,KAAKd,EAASiB,OACZ,OAAOJ,EAAaK,OAASJ,EAAcI,OAE7C,QACE,OAAO,MAITd,GACFO,EAAaQ,UAGRR,EA8BaS,CAClBnB,EACA,CAAEM,WAAUH,eAGd,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYhB,IAAaP,EAASe,UAEtCS,QArCkB,kBAAMhB,EAAYR,EAASe,UA+B/C,iCAWA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYhB,IAAaP,EAASiB,SAEtCO,QA9CiB,kBAAMhB,EAAYR,EAASiB,SAwC9C,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAanB,IAEjBoB,QA7CiB,kBAAMnB,GAAeD,IAuCxC,qBAUCG,IAAaP,EAASM,MAAQF,EAE3B,wBACEkB,KAAK,SACLD,UAAU,4BACVG,QApDY,WACtBhB,EAAYR,EAASM,MAGrBD,GAAc,IA6CN,mBAOE,MAER,6BACGI,EAAYgB,KAAI,SAAAC,GAAI,OACnB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCpIlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1584d98d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((firstProduct, secondProduct) => {\n    switch (sortType) {\n      case SortType.ALPABET:\n        return firstProduct.localeCompare(secondProduct);\n\n      case SortType.LENGTH:\n        return firstProduct.length - secondProduct.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const handleAlpabetSort = () => setSortType(SortType.ALPABET);\n\n  const handleLengthSort = () => setSortType(SortType.LENGTH);\n\n  // непонятно как это работает если мы прошлый стейт не используем\n  // мі просто всегда записвіваем при клике противоположній текущему\n  // если тру то при клике станет фолз и при след клике текущий фолз станет тру\n  // у isReversed есть переменная с базовім фолз что мі передали\n  // в useState(false) и функция setIsReversed его меняет\n  // поэтому мы и пишем функцию setIsReversed и в нее кидаем значение\n  // противоположное isReversed то есть из фолз на тру\n  // тут простые переменные и функции что их меняют\n  // наш стейт то useState(false) то что мі в єту функцию поставили\n  // также реакт сам хранит значения єтих переменніх во время перерендера\n  const handleReversSort = () => setIsReversed(!isReversed);\n\n  const handleResetSort = () => {\n    setSortType(SortType.NONE);\n    // тут в setIsReversed стоял !isReversed но все работало\n    // но тесты не проходили\n    setIsReversed(false);\n  };\n\n  const renderItems = getReorderedGoods(\n    goodsFromServer,\n    { sortType, isReversed },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ALPABET },\n          )}\n          onClick={handleAlpabetSort}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={handleLengthSort}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={handleReversSort}\n        >\n          Reverse\n        </button>\n        {sortType !== SortType.NONE || isReversed\n          ? (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={handleResetSort}\n            >\n              Reset\n            </button>\n          ) : ''}\n      </div>\n      <ul>\n        {renderItems.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n// import React, { useState } from 'react';\n// import classNames from 'classnames';\n// import 'bulma/css/bulma.css';\n// import './App.scss';\n\n// export const goodsFromServer = [\n//   'Dumplings',\n//   'Carrot',\n//   'Eggs',\n//   'Ice cream',\n//   'Apple',\n//   'Bread',\n//   'Fish',\n//   'Honey',\n//   'Jam',\n//   'Garlic',\n// ];\n\n// enum SortType {\n//   NONE,\n//   ALPABET,\n//   LENGTH,\n// }\n\n// type ReorderOptions = {\n//   sortType: SortType,\n//   isReversed: boolean,\n// };\n\n// export function getReorderedGoods(\n//   goods: string[],\n//   { sortType, isReversed }: ReorderOptions,\n// ) {\n//   const visibleGoods = [...goods];\n\n//   visibleGoods.sort((firstProduct, secondProduct) => {\n//     switch (sortType) {\n//       case SortType.ALPABET:\n//         return firstProduct.localeCompare(secondProduct);\n\n//       case SortType.LENGTH:\n//         return firstProduct.length - secondProduct.length;\n\n//       default:\n//         return 0;\n//     }\n//   });\n\n//   if (isReversed) {\n//     visibleGoods.reverse();\n//   }\n\n//   return visibleGoods;\n// }\n\n// export const App: React.FC = () => {\n//   const [isReversed, setIsReversed] = useState(false);\n//   const [sortType, setSortType] = useState(SortType.NONE);\n\n//   const handleAlpabetSort = () => setSortType(SortType.ALPABET);\n\n//   const handleLengthSort = () => setSortType(SortType.LENGTH);\n\n//   // непонятно как это работает если мы прошлый стейт не используем\n//   // мі просто всегда записвіваем при клике противоположній текущему\n//   // если тру то при клике станет фолз и при след клике текущий фолз станет тру\n//   // у isReversed есть переменная с базовім фолз что мі передали\n//   // в useState(false) и функция setIsReversed его меняет\n//   // поэтому мы и пишем функцию setIsReversed и в нее кидаем значение\n//   // противоположное isReversed то есть из фолз на тру\n//   // тут простые переменные и функции что их меняют\n//   // наш стейт то useState(false) то что мі в єту функцию поставили\n//   // также реакт сам хранит значения єтих переменніх во время перерендера\n//   const handleReversSort = () => setIsReversed(!isReversed);\n\n//   const handleResetSort = () => {\n//     setSortType(SortType.NONE);\n//     // тут в setIsReversed стоял !isReversed но все работало\n//     // но тесты не проходили\n//     setIsReversed(false);\n//   };\n\n//   const renderItems = getReorderedGoods(\n//     goodsFromServer,\n//     { sortType, isReversed },\n//   );\n\n//   return (\n//     <div className=\"section content\">\n//       <div className=\"buttons\">\n//         <button\n//           type=\"button\"\n//           className={classNames(\n//             'button is-info',\n//             { 'is-light': sortType !== SortType.ALPABET },\n//           )}\n//           onClick={handleAlpabetSort}\n//         >\n//           Sort alphabetically\n//         </button>\n\n//         <button\n//           type=\"button\"\n//           className={classNames(\n//             'button is-success',\n//             { 'is-light': sortType !== SortType.LENGTH },\n//           )}\n//           onClick={handleLengthSort}\n//         >\n//           Sort by length\n//         </button>\n\n//         <button\n//           type=\"button\"\n//           className={classNames(\n//             'button is-warning',\n//             { 'is-light': !isReversed },\n//           )}\n//           onClick={handleReversSort}\n//         >\n//           Reverse\n//         </button>\n//         {sortType !== SortType.NONE || isReversed\n//           ? (\n//             <button\n//               type=\"button\"\n//               className=\"button is-danger is-light\"\n//               onClick={handleResetSort}\n//             >\n//               Reset\n//             </button>\n//           ) : ''}\n//       </div>\n//       <ul>\n//         {renderItems.map(good => (\n//           <li data-cy=\"Good\" key={good}>\n//             {good}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}